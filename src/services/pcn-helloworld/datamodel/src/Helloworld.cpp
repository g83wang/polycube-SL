/**
* helloworld API generated from helloworld.yang
*
* NOTE: This file is auto generated by polycube-codegen
* https://github.com/polycube-network/polycube-codegen
*/


// TODO: Modify these methods with your own implementation


#include "Helloworld.h"
#include "Helloworld_dp.h"

Helloworld::Helloworld(const std::string name, const HelloworldJsonObject &conf)
  : Cube(conf.getBase(), { helloworld_code }, {}),
    HelloworldBase(name) {
  logger()->info("Creating Helloworld instance");
  addPortsList(conf.getPorts());
    setAction(conf.getAction());
}


Helloworld::~Helloworld() {
  logger()->info("Destroying Helloworld instance");
}

void Helloworld::packet_in(Ports &port,
    polycube::service::PacketInMetadata &md,
    const std::vector<uint8_t> &packet) {
  logger()->debug("Packet received from port {0}", port.name());
}

// Basic default implementation, place your extension here (if needed)
std::shared_ptr<Ports> Helloworld::getPorts(const std::string &name) {
  // call default implementation in base class
  return HelloworldBase::getPorts(name);
}

// Basic default implementation, place your extension here (if needed)
std::vector<std::shared_ptr<Ports>> Helloworld::getPortsList() {
  // call default implementation in base class
  return HelloworldBase::getPortsList();
}

// Basic default implementation, place your extension here (if needed)
void Helloworld::addPorts(const std::string &name, const PortsJsonObject &conf) {
  HelloworldBase::addPorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Helloworld::addPortsList(const std::vector<PortsJsonObject> &conf) {
  // call default implementation in base class
  HelloworldBase::addPortsList(conf);
}

// Basic default implementation, place your extension here (if needed)
void Helloworld::replacePorts(const std::string &name, const PortsJsonObject &conf) {
  // call default implementation in base class
  HelloworldBase::replacePorts(name, conf);
}

// Basic default implementation, place your extension here (if needed)
void Helloworld::delPorts(const std::string &name) {
  // call default implementation in base class
  HelloworldBase::delPorts(name);
}

// Basic default implementation, place your extension here (if needed)
void Helloworld::delPortsList() {
  // call default implementation in base class
  HelloworldBase::delPortsList();
}

HelloworldActionEnum Helloworld::getAction() {
  throw std::runtime_error("Helloworld::getAction: Method not implemented");
}

void Helloworld::setAction(const HelloworldActionEnum &value) {
  throw std::runtime_error("Helloworld::setAction: Method not implemented");
}


